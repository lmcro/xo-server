#!/usr/bin/env node

var join = require('path').join
var readdir = require('fs').readdirSync
var stat = require('fs').statSync
var writeFile = require('fs').writeFileSync

// ===================================================================

function bind (fn, thisArg) {
  return function () {
    return fn.apply(thisArg, arguments)
  }
}

function camelCase (str) {
  return str.toLowerCase().replace(/[^a-z0-9]+([a-z0-9])/g, function (_, str) {
    return str.toUpperCase()
  })
}

function removeSuffix (str, sfx) {
  var strLength = str.length
  var sfxLength = sfx.length

  var pos = strLength - sfxLength
  if (pos < 0 || str.indexOf(sfx, pos) !== pos) {
    return false
  }

  return str.slice(0, pos)
}

// ===================================================================

function handleEntry (entry, dir) {
  var stats = stat(join(dir, entry))
  var base
  if (stats.isDirectory()) {
    base = entry
  } else if (!(
    stats.isFile() && (
      (base = removeSuffix(entry, '.coffee')) ||
      (base = removeSuffix(entry, '.js'))
    )
  )) {
    return
  }

  var identifier = camelCase(base)
  this(
    'import ' + identifier + " from './" + base + "'",
    'defaults.' + identifier + ' = ' + identifier,
    'export * as ' + identifier + " from './" + base + "'",
    ''
  )
}

function generateIndex (dir) {
  var content = [
    '//',
    '// This file has been generated by /tools/generate-index',
    '//',
    '// It is automatically re-generated each time a build is started.',
    '//',
    '',
    'const defaults = {}',
    'export default defaults',
    ''
  ]
  var write = bind(content.push, content)

  readdir(dir).map(function (entry) {
    if (entry === 'index.js') {
      return
    }

    handleEntry.call(write, entry, dir)
  })

  writeFile(dir + '/index.js', content.join('\n'))
}

process.argv.slice(2).map(generateIndex)
